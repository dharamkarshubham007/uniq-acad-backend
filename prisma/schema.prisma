// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  firstName        String             @map("first_name")
  lastName         String             @map("last_name")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  UserRole         UserRole?          
  InstructorCourse InstructorCourse[]
  StudentCourse    StudentCourse[]
  @@map(name: "user")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  roleId    Int      @map("role_id") 
  role      Role     @relation(fields: [roleId], references: [id])
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())  @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map(name: "user_role")
}

model Role {
  id       Int         @id @default(autoincrement())
  role     AllUserRole
  UserRole UserRole[]
  @@map(name: "role")
}

model Course {
  id               Int                @id @default(autoincrement())
  name             String
  prerequisites    String
  duration         Int
  numberOfStudents Int                @map("number_of_students")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  instructorCourse InstructorCourse?
  studentCourses   StudentCourse[]
  @@map(name: "course")
}

model InstructorCourse {
  id              Int      @id @default(autoincrement())
  instructorId    Int      @map("instructor_id") 
  user            User     @relation(fields: [instructorId], references: [id])
  courseId        Int      @map("course_id")
  course          Course   @relation(fields: [courseId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  @@map(name: "instructor_course")
}

model StudentCourse {
  id        Int                 @id @default(autoincrement())
  status    StudentCourseStatus @default(IN_PROGRESS)
  courseId  Int                 @map("course_id")
  course    Course              @relation(fields: [courseId], references: [id])
  studentId Int                 @map("student_id")
  user      User                @relation(fields: [studentId], references: [id])
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  @@map(name: "student_course")
}

enum StudentCourseStatus {
  IN_PROGRESS
  COMPLETED
}

enum AllUserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}
